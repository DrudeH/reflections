When would you want to use a remote repository rather than keeping all your 
work local?
  For the same reasons I am using Dropbox. It offers so many possibilities,
  if you pc breaks down, if you are working from different work stations,
  if you are cooperating with someone on a project, etc. etc.

Why might you want to always pull changes manually rather than having Git 
automatically stay up-to-date with your remote repository?
	For the same reason I want to manually create my local commits.
	I will have to remember to upload, but I will only get the commits
	that makes logically sense. Furthermore, I might, not want to 
	upload all branches of a specific repository to GitHub.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
	Forks: 		When copying someone elses repositories in GitHub to my own.
				Especially useful when I'm usings someones work as basis.
	Clones:		When I move my own repositories from between my remotes.
				Especially useful in daily work.
	Branches:	When I am working inside a repository and want to create 
				different tracks. Especially useful for larger edits.  

What is the benefit of having a copy of the last known state of the remote 
stored locally?
	It makes it possible to merge the local updated commits with any other
	updates that have been pushed to the remote.

How would you collaborate without using Git or GitHub? What would be easier, 
and what would be harder?
	The system is nice, but very "nerdy" - I would only be able to use this
	when I work on projects with people that have tried it before.
	I am not sure if the GitHub server system can be used by persons that
	do not have a deep understanding of Git Bash and command prompts.
	If so, it might simplify things.

When would you want to make changes in a separate branch rather than directly 
in master? What benefits does each approach have?
	I think we have been partly by this point earlier. When sharing a project,
	it enables you to put up different proposed changes without editing the 
	master branch. 
	It is a very tedious affair though. In my first experiences with Git,
	I don't really think I want to work with other people. Either them or
	I (or both) will just mess everything up.